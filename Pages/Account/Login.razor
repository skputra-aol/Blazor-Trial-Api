@page "/account/login"
@page "/account/login/{er:int}"
@inject IAccountService AccountService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

<div class="card">
    <h4 class="card-header">Login Form</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="model.email" class="form-control" />
                <ValidationMessage For="@(() => model.email)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="account/register" class="btn btn-link">Register</NavLink>
        </EditForm>
        <br/>
        <div><label class="msg-login">@msg</label></div>
    </div>
    
</div>

@code {
    [Parameter]
    public int er { get; set; }

    private Models.Account.Login model = new Models.Account.Login();
    private bool loading;
    private bool refresh;
    public string msg;



    protected override void OnAfterRender(bool firstRender)
    {
        OnValid();
    }

    private async void OnValid(){
        if(AccountService.info=="unauthorized") {
            msg="Login Failed. Please check your email or password";
        }
        else{
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            if(returnUrl.Length>4)
            {
                NavigationManager.NavigateTo(returnUrl);
            }
        }
    }
    private  void OnValidSubmit()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        
        try
        {
           
             AccountService.Login(model);

            //var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            //NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            AlertService.Error("Login Failed");
            loading = false;
            StateHasChanged();
        }
    }

}