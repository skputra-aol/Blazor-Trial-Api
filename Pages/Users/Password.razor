@page "/users/password"
@attribute [Authorize]
@inject IAlertService AlertService
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<h1>Change Password</h1>
@if (model != null)
{
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-row">
            <div class="form-group col">
                <label>Old Password</label>
                <InputText @bind-Value="model.oldPassword" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.oldPassword)" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col">
                <label>New Password</label>
                <InputText @bind-Value="model.newPassword" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.newPassword)" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col">
                <label>Repeat New Password</label>
                <InputText @bind-Value="model.repeatPassword" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.repeatPassword)" />
        </div>
        </div>
        <div class="form-group">
            <button disabled="@loading" class="btn btn-primary">
                @if (loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Save
            </button>
            <NavLink href="users" class="btn btn-link">Cancel</NavLink>
        </div>
    </EditForm>
}
else
{
    <div class="text-center p-3">
        <span class="spinner-border spinner-border-lg align-center"></span>
    </div>
}

@code {

    private ChangePassword model;
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        model = new ChangePassword();

    }

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            var data= await AccountService.ChangePassword("0", model);
            if(data.Content.Length==0)
            {
                AlertService.Success("Change Password Success", keepAfterRouteChange: true);
                NavigationManager.NavigateTo("users");
            }
            else
            {
                AlertService.Error(data.Content);
                loading = false;
                StateHasChanged();
            }
            
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }

}